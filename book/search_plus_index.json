{"./":{"url":"./","title":"Python","keywords":"","body":"Python Python 是一种易于扩展、功能强大、面向对象的编程语言。 "},"docs/快速入门.html":{"url":"docs/快速入门.html","title":"快速入门","keywords":"","body":"快速入门 最简单的运行 Python 程序的方法就是使用命令行，执行下面的命令。 python >>> print('Hello World!') 也可以通过命令行运行 Python 文件，新建 main.py 文件内容如下。 print('Hello World!') 打开命令行，执行下面的命令。 python main.py 当然，还可以使用集成开发工具 PyCharm 编辑和运行指定的 Python 程序。 "},"docs/基础语法.html":{"url":"docs/基础语法.html","title":"基础语法","keywords":"","body":"基础语法 标识符 代码注释 行与缩进 多行语句 "},"docs/基础语法/标识符.html":{"url":"docs/基础语法/标识符.html","title":"标识符","keywords":"","body":"标识符 标识符由字母、数字和下划线组成，其中第一个字符必须是字母或下划线，且严格区分大小写。 注意，标识符禁止使用保留关键字。 "},"docs/基础语法/代码注释.html":{"url":"docs/基础语法/代码注释.html","title":"代码注释","keywords":"","body":"代码注释 在 Python 中有两种主要的代码注释方式，分别为单行注释、多行注释。 # 单行注释 \"\"\" 多行注释 \"\"\" "},"docs/基础语法/行与缩进.html":{"url":"docs/基础语法/行与缩进.html","title":"行与缩进","keywords":"","body":"行与缩进 Python 最具特色的就是使用缩进来表示代码块，同一个代码块的语句必须包含相同的缩进空格数。 if 1 + 1 == 2: print(True) else: print(False) 若语句缩进的空格数不一致，将会导致运行错误。 if 1 + 1 == 2: print(True) print(233) else: print(False) print(666) "},"docs/基础语法/多行语句.html":{"url":"docs/基础语法/多行语句.html","title":"多行语句","keywords":"","body":"多行语句 若单行语句过长可以使用反斜杠来实现多行语句。 str = '123' + \\ '456' + \\ '789' print(str) "},"docs/数据类型.html":{"url":"docs/数据类型.html","title":"数据类型","keywords":"","body":"数据类型 "},"docs/数据类型/数值类型.html":{"url":"docs/数据类型/数值类型.html","title":"数值类型","keywords":"","body":"数值类型 Python 中的数值类型主要包括整型、浮点型、布尔型和复数型。 a = 233 b = 6.66 c = True d = 4 + 3j print(a, b, c, d) print(type(a), type(b), type(c), type(d)) "},"docs/数据类型/字符串类型.html":{"url":"docs/数据类型/字符串类型.html","title":"字符串类型","keywords":"","body":"字符串类型 在 Python 中，字符串是由单字符所组成的序列。 str = 'Hello World!' print(str) print(str[:]) print(str[0]) print(str[2:7]) print(str[2:]) print(str[:-1]) print(str * 2) print(str + ' Python!') 如果不想让反斜杠转义特殊字符，可以在字符串前添加字符 r 表示原始字符串。 str = 'Hello \\n World!' print(str) str = r'Hello \\n World!' print(str) 与 C 语言中字符串操作不同的是，在 Python 中字符串不能被改变。 str = 'Hello World!' print(str) str = str[:6] + 'Python!' print(str) 还可以使用三个单引号或双引号中包括多行字符串。 str = \"\"\" ABC ''' DEF ''' GHI \"\"\" print(str) "},"docs/数据类型/布尔类型.html":{"url":"docs/数据类型/布尔类型.html","title":"布尔类型","keywords":"","body":"布尔类型 布尔类型只有两个值，可以用来控制程序的流程。 print(type(True)) print(type(False)) "},"docs/数据类型/列表类型.html":{"url":"docs/数据类型/列表类型.html","title":"列表类型","keywords":"","body":"列表类型 列表中的元素类型可以不相同，主要用来实现集合类的数据结构。 list = [233, 6.66, True, 4 + 3j, 'Hello World!'] print(list) print(list[0]) print(list[1:3]) print(list[2:]) print(list[:-1]) print(list * 2) print(list + [1, 2, 3]) 与字符串不同的是，列表中的元素是可以改变的。 list = [233, 6.66, True, 4 + 3j, 'Hello World!'] print(list) list[2] = False print(list) list[1:4] = [1, 2, 3] print(list) list[:-1] = [] print(list) 列表也可以进行多个层次的嵌套。 matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] print(matrix) print(matrix[0]) print(matrix[1][2]) "},"docs/数据类型/元组类型.html":{"url":"docs/数据类型/元组类型.html","title":"元组类型","keywords":"","body":"元组类型 元组与列表相似，不同之处在于元组中的元素不能修改。 tuple = (233, 6.66, True, 4 + 3j, 'Hello World!') print(tuple) print(tuple[0]) print(tuple[1:3]) print(tuple[2:]) print(tuple[:-1]) print(tuple * 2) print(tuple + (1, 2, 3)) 虽然元组中的元素不可改变，但它可以包含列表类型。 tuple = (233, [6.66, 'Hello World!']) print(tuple) tuple[1][0] = True print(tuple) 若只创建仅有一个元素的元组，需要在该元素后面添加一个逗号。 tuple = (233,) print(tuple) "},"docs/数据类型/集合类型.html":{"url":"docs/数据类型/集合类型.html","title":"集合类型","keywords":"","body":"集合类型 集合是一种无序、可变的数据类型，用于存储唯一的元素。 set = {'Google', 'Facebook', 'Google', 'TikTok'} print(set) if 'Google' in set: print('Found') else: print('Not Found') 执行下面的代码，进行并集、交集、差集等常见的集合操作。 set1 = set('adcabde') set2 = set('cdf') print(set1 | set2) print(set1 & set2) print(set1 - set2) print(set1 ^ set2) 创建一个空集合需要使用以下的方式。 set = set() print(set) "},"docs/数据类型/字典类型.html":{"url":"docs/数据类型/字典类型.html","title":"字典类型","keywords":"","body":"字典类型 字典是一种映射类型，它是一种无序键值对的集合。 dict = {'id': 1, 'name': 'Google', 'site': 'www.google.com'} print(dict) print(dict['id']) print(dict['name']) print(dict['site']) print(dict.keys()) print(dict.values()) 也可以通过构造函数的方式来初始化字典。 dict = dict(id=1, name='Google', site='www.google.com') print(dict) print(dict['id']) print(dict['name']) print(dict['site']) print(dict.keys()) print(dict.values()) "}}